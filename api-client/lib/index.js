'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InSpExApi = exports.SupportedFilters = exports.StatFilter = exports.Stat = exports.Slice = exports.MetaFilter = exports.AnalysisQuery = exports.AnalysedSlice = exports.ApiClient = undefined;

var _ApiClient = require('./ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _AnalysedSlice = require('./model/AnalysedSlice');

var _AnalysedSlice2 = _interopRequireDefault(_AnalysedSlice);

var _AnalysisQuery = require('./model/AnalysisQuery');

var _AnalysisQuery2 = _interopRequireDefault(_AnalysisQuery);

var _MetaFilter = require('./model/MetaFilter');

var _MetaFilter2 = _interopRequireDefault(_MetaFilter);

var _Slice = require('./model/Slice');

var _Slice2 = _interopRequireDefault(_Slice);

var _Stat = require('./model/Stat');

var _Stat2 = _interopRequireDefault(_Stat);

var _StatFilter = require('./model/StatFilter');

var _StatFilter2 = _interopRequireDefault(_StatFilter);

var _SupportedFilters = require('./model/SupportedFilters');

var _SupportedFilters2 = _interopRequireDefault(_SupportedFilters);

var _InSpExApi = require('./api/InSpExApi');

var _InSpExApi2 = _interopRequireDefault(_InSpExApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Object.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var InteractiveSpectralExploration = require('index'); // See note below*.
* var xxxSvc = new InteractiveSpectralExploration.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new InteractiveSpectralExploration.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new InteractiveSpectralExploration.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new InteractiveSpectralExploration.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
exports.ApiClient = _ApiClient2.default;
exports.AnalysedSlice = _AnalysedSlice2.default;
exports.AnalysisQuery = _AnalysisQuery2.default;
exports.MetaFilter = _MetaFilter2.default;
exports.Slice = _Slice2.default;
exports.Stat = _Stat2.default;
exports.StatFilter = _StatFilter2.default;
exports.SupportedFilters = _SupportedFilters2.default;
exports.InSpExApi = _InSpExApi2.default; /**
                                          * Interactive Spectral Exploration
                                          * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
                                          *
                                          * OpenAPI spec version: 1.0.0
                                          * 
                                          *
                                          * NOTE: This class is auto generated by the swagger code generator program.
                                          * https://github.com/swagger-api/swagger-codegen.git
                                          * Do not edit the class manually.
                                          *
                                          */