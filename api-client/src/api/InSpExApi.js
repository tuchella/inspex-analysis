/**
 * Interactive Spectral Exploration
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AnalysedSlice from '../model/AnalysedSlice';
import AnalysisQuery from '../model/AnalysisQuery';
import Slice from '../model/Slice';
import SupportedFilters from '../model/SupportedFilters';

/**
* InSpEx service.
* @module api/InSpExApi
* @version 1.0.0
*/
export default class InSpExApi {

    /**
    * Constructs a new InSpExApi. 
    * @alias module:api/InSpExApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getFilters operation.
     * @callback module:api/InSpExApi~getFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportedFilters} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get supporter filters
     * @param {module:api/InSpExApi~getFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportedFilters}
     */
    getFilters(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupportedFilters;

      return this.apiClient.callApi(
        '/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSlice operation.
     * @callback module:api/InSpExApi~getSliceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Slice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run an analysis
     * @param {module:api/InSpExApi~getSliceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Slice}
     */
    getSlice(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Slice;

      return this.apiClient.callApi(
        '/slices/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the runAnalysis operation.
     * @callback module:api/InSpExApi~runAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnalysedSlice>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run an analysis
     * @param {Object} opts Optional parameters
     * @param {module:api/InSpExApi~runAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnalysedSlice>}
     */
    runAnalysis(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AnalysedSlice];

      return this.apiClient.callApi(
        '/analysis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
